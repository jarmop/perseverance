{"version":3,"sources":["PIA23727_ultrawide_small.png","App.js","reportWebVitals.js","index.js"],"names":["CANVAS_SIZE","CANVAS_CENTER","X","Y","CIRCLE_RADIUS","Math","sqrt","pow","draw","ctx","background","viewAngleRight","viewAngleLeft","clearRect","beginPath","drawImage","moveTo","arc","closePath","fillStyle","fill","getPositionInRadians","position","IMAGE_ASPECT_RATIO","PI","getLeftInRadians","window","scrollX","getRightInRadians","innerWidth","App","useEffect","document","getElementById","getContext","Image","src","onload","addEventListener","className","image","alt","height","id","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wJAAe,G,UAAA,IAA0B,sD,OCSnCA,EAAc,IACdC,EAAgB,CACpBC,EAAGF,IACHG,EAAGH,KAGCI,EAAgBC,KAAKC,KAAK,EAAID,KAAKE,IAAIP,IAAiB,IAExDQ,EAAO,SAACC,EAAKC,EAAYC,EAAgBC,GAC7CH,EAAII,UAAU,EAAG,EAAGb,EAAaA,GACjCS,EAAIK,YACJL,EAAIM,UAAUL,EAAY,EAAG,GAC7BD,EAAIO,OAAOf,EAAcC,EAAGD,EAAcE,GAC1CM,EAAIQ,IACFhB,EAAcC,EACdD,EAAcE,EACdC,EACAO,EACAC,GAEFH,EAAIS,YACJT,EAAIU,UAAY,4BAChBV,EAAIW,QAGAC,EAAuB,SAACC,GAC5B,OAAQA,EA3BkBC,mBA2BgB,EAAIlB,KAAKmB,GAAK,KAEpDC,EAAmB,kBAAMJ,EAAqBK,OAAOC,UACrDC,EAAoB,kBACxBP,EAAqBK,OAAOC,QAAUD,OAAOG,aAwBhCC,MAtBf,WAcE,OAbAC,qBAAU,WACR,IACMtB,EADSuB,SAASC,eAAe,UACpBC,WAAW,MACxBxB,EAAa,IAAIyB,MACvBzB,EAAW0B,IAAM,gBACjB1B,EAAW2B,OAAS,WAClB7B,EAAKC,EAAKC,EAAYe,IAAoBG,MAE5CI,SAASM,iBAAiB,UAAU,WAClC9B,EAAKC,EAAKC,EAAYe,IAAoBG,UAE3C,IAGD,sBAAKW,UAAU,MAAf,UACE,qBAAKH,IAAKI,EAAOC,IAAI,GAAGC,OAlDD,MAmDvB,wBAAQC,GAAG,SAASC,MAAO5C,EAAa0C,OAAQ1C,QC9CvC6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASC,eAAe,SAM1BY,K","file":"static/js/main.340df7bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/PIA23727_ultrawide_small.d064c005.png\";","import { useEffect } from 'react'\nimport './App.css'\nimport image from './PIA23727_ultrawide_small.png'\n\nconst IMAGE_WIDTH = 93355\nconst IMAGE_HEIGHT = 2127\nconst IMAGE_ASPECT_RATIO = IMAGE_WIDTH / IMAGE_HEIGHT\nconst IMAGE_ELEMENT_HEIGHT = 500\nconst IMAGE_ELEMENT_WIDTH = IMAGE_ASPECT_RATIO * IMAGE_ELEMENT_HEIGHT\nconst CANVAS_SIZE = 500\nconst CANVAS_CENTER = {\n  X: CANVAS_SIZE / 2,\n  Y: CANVAS_SIZE / 2,\n}\n// Make circle just large enough to go outside of canvas\nconst CIRCLE_RADIUS = Math.sqrt(2 * Math.pow(CANVAS_SIZE / 2, 2))\n\nconst draw = (ctx, background, viewAngleRight, viewAngleLeft) => {\n  ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE)\n  ctx.beginPath()\n  ctx.drawImage(background, 0, 0)\n  ctx.moveTo(CANVAS_CENTER.X, CANVAS_CENTER.Y)\n  ctx.arc(\n    CANVAS_CENTER.X,\n    CANVAS_CENTER.Y,\n    CIRCLE_RADIUS,\n    viewAngleRight,\n    viewAngleLeft\n  )\n  ctx.closePath()\n  ctx.fillStyle = 'rgba(255, 255, 255, 0.15)'\n  ctx.fill()\n}\n\nconst getPositionInRadians = (position) => {\n  return (position / IMAGE_ELEMENT_WIDTH) * 2 * Math.PI + 0.75\n}\nconst getLeftInRadians = () => getPositionInRadians(window.scrollX)\nconst getRightInRadians = () =>\n  getPositionInRadians(window.scrollX + window.innerWidth)\n\nfunction App() {\n  useEffect(() => {\n    const canvas = document.getElementById('canvas')\n    const ctx = canvas.getContext('2d')\n    const background = new Image()\n    background.src = 'jezero500.png'\n    background.onload = () => {\n      draw(ctx, background, getLeftInRadians(), getRightInRadians())\n    }\n    document.addEventListener('scroll', () => {\n      draw(ctx, background, getLeftInRadians(), getRightInRadians())\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <img src={image} alt=\"\" height={IMAGE_ELEMENT_HEIGHT}></img>\n      <canvas id=\"canvas\" width={CANVAS_SIZE} height={CANVAS_SIZE}></canvas>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}